[{"title":"荼菜的iOS笔记--Xcode Tips","date":"2017-03-02T08:44:09.000Z","path":"2017/03/02/荼菜的iOS笔记-Xcode-Tips/","text":"前言：孙源大神总结了几个 Xcode 小技巧，为方便自己查看遂自己拷贝一份 #一、快速定位方法调用者 #二、继续编译有Error的工程 #三、给@prorerty设置断点 后话：附上之前写的文章，欢迎指正：荼菜的iOS笔记–Core Animation 核心动画 荼菜的iOS笔记–UIView的几个Block动画荼菜的iOS笔记–一些实用功能。荼菜的iOS笔记–UITableViewCell的各种操作（刷新、插入、删除、动画）荼菜的iOS笔记–一张图记住所有git命令行操作。荼菜的iOS笔记–一张图告诉你程序员需要知道的这些网站。荼菜的iOS笔记–图片裁剪黑魔法。荼菜的iOS笔记–iOS自动打包脚本（Python） 荼菜的iOS笔记–我的编码规范参考。荼菜的iOS笔记–iOS基础优秀博客总结ToDoList当然，我还写过诗。。。光。","tags":[]},{"title":"荼菜的iOS笔记--iOS基础优秀博客总结ToDoList","date":"2017-03-02T08:41:46.000Z","path":"2017/03/02/荼菜的iOS笔记-iOS基础优秀博客总结ToDoList/","text":"前言：最近在总结iOS比较底层的东西，于是翻遍了各个大牛的博客，看到AidenRao总结的文章，挨个点进去看了很不错，于是又补充了些我觉得不错的文章，给自己做个备份。 #类和对象 iOS程序main函数之前发生了什么谈ObjC对象的两段构造模式从NSObject的初始化了解isa (1)深入解析ObjC中方法的结构(2)What is a meta-class in Objective-C?对象是如何初始化的深入理解Objective-C：Category #RunLoop ：YY大神(深入理解RunLoop)视频：孙源(百度)(线下分享RunLoop)RunLoop总结：RunLoop基础知识RunLoop 总结：RunLoop的应用场景（一）保证线程长久存活RunLoop 总结：RunLoop的应用场景（二）让Timer正常运转RunLoop总结：RunLoop的应用场景（三）滚动视图流畅性优化RunLoop总结：RunLoop的应用场景（四）App卡顿监测RunLoop总结：RunLoop的应用场景（五）阻止App崩溃一次 #RuntimeiOS-runtimeiOS-runtime理解iOS开发之Runtime常用示例总结深入理解Objective-C：方法缓存译:理解 Objective-C RuntimeObjective-C Runtime 1小时入门教程Method Swizzling 和 AOP 实践刨根问底：对于 self = [super init] 的思考 在objc中的一个重要的特点就是对象化。我们所用的 NSObject 这个类其实也是一个对象。如果我们初始化 NSObject *p = [[NSObject alloc] init]; ，那么 p 这个对象中在runtime时会当作一个结构体isa_t对象来处理。而其中的 isa 指针（由objc_object继承而来）会指向自身的类对象。也就是说，这里的 p.isa 是指向 NSObject （这种写法不太严格，但是可以这么描述）。同此，文中的 block 也为了模仿 对象 的结构，制作了一个isa属性。对于isa的具体细节我没有写过相关文章，但是强烈推荐学习这篇博文 runtime可以做什么？ 多继承 交换两个方法法的实现 关联对象 #GCDGCD 深入理解：第一部分GCD 深入理解：第二部分 #多线程 与 锁Objective-C中不同方式实现锁(一)Objective-C中不同方式实现锁(二)iOS中的锁iOS开发－多线程开发之线程安全篇iOS多线程-各种线程锁的简单介绍关于 @synchronized，这儿比你想知道的还要多iOS中保证线程安全的几种方式与性能对比 #并发编程Cocoa 并发编程iOS 多线程编程 —— GCD 与 NSOperation 总结 #MRC 和 ARCObjective-C 中的内存分配 #事件处理Cocoa Touch事件处理流程–响应者链iOS中的事件处理、响应者链条以及第一响应者在 Target-Action 中使用响应链 #设计模式设计模式 #动画荼菜的iOS笔记–Core Animation 核心动画 #流畅： 离屏渲染绘制像素到屏幕上 #SwiftSwift教程 #反编译(逆向)：工具 FLEXLoader #python： step 1： 两本书：《A Byte of Python》 《Learning Python》《Python核心编程 宋吉广 译》 step 2： 视频：Python 入门（imooc) step 3： 博客：菜鸟学python) #Unity3D体验第一个游戏雏形 #AFNetWorking #ResumeSampleResumeSample《招聘一个靠谱的 iOS》— 参考答案 #源码解析源码解析-Draveness #阿里巴巴hit-alibaba.github.io #拓展iOS 中armv7,armv7s,arm64,i386,x86_64 都是什么iOS开发～制作同时支持armv7,armv7s,arm64,i386,x86_64的静态库.aclang -rewrite-objc MyClass.m 执行上面的命令，将这一句重写为C代码 后话：附上之前写的文章，欢迎指正：荼菜的iOS笔记–Core Animation 核心动画 荼菜的iOS笔记–UIView的几个Block动画荼菜的iOS笔记–一些实用功能。荼菜的iOS笔记–UITableViewCell的各种操作（刷新、插入、删除、动画）荼菜的iOS笔记–一张图记住所有git命令行操作。荼菜的iOS笔记–一张图告诉你程序员需要知道的这些网站。荼菜的iOS笔记–图片裁剪黑魔法。荼菜的iOS笔记–iOS自动打包脚本（Python） 荼菜的iOS笔记–我的编码规范参考。荼菜的iOS笔记–Xcode Tips当然，我还写过诗。。。光。","tags":[]},{"title":"荼菜的iOS笔记--我的编码规范参考.","date":"2017-03-02T08:38:22.000Z","path":"2017/03/02/荼菜的iOS笔记-我的编码规范参考/","text":"前言：下面是我的编码习惯。 12345678#一、常量相对字符串字面量或数字，我们更推荐适用常量。应使用static方式声明常量，而非使用#define的方式来定义宏。例如：static NSString * const NYTAboutViewControllerCompanyName = @&quot;The New York Times Company&quot;; static const CGFloat NYTImageThumbnailHeight = 50.0;不恰当://#define CompanyName @&quot;The New York Times Company&quot;//#define thumbnailHeight 2 1234567#二、枚举类型在使用enum的时候，推荐适用最新的fixed underlying type(WWDC 2012 session 405- Modern Objective-C)规范，因为它具备更强的类型检查和代码完成功能。如：typedef NS_ENUM(NSInteger, NYTAdRequestState) &#123;NYTAdRequestStateInactive,NYTAdRequestStateLoading&#125;; 123#三、布尔变量如果一个BOOL属性使用形容词来表达，属性将忽略’is’前缀，但会强调惯用名称。 例如：@property (assign, getter=isEditable) BOOL editable; 1234567891011#四、单例在创建单例对象的共享实例时，应使用线程安全模式。如：(instancetype)sharedInstance &#123;static id sharedInstance = nil;static dispatch_once_t onceToken;dispatch_once(&amp;onceToken, ^&#123;sharedInstance = [[self alloc] init];&#125;);return sharedInstance;&#125; 12345678910111213141516#五、Import在类的头文件中需要引用其他的类的时候，需要用@class这个关键字，这样能减少类与类之间的依赖。如:store.h:#import &lt;Foundation/Foundation.h&gt;#import &lt;CoreData/CoreData.h&gt;@class User;@interface Store : NSManagedObject@property (nonatomic, retain) User *user;@endStore.m:#import &quot;Store.h&quot;#import &quot;User.h&quot;@implementation Store//doSomething@end 1234567891011121314#六、CGRect函数当需要获取一个CGRect矩形的x,y,width,height属性时，应使用CGGeometry函数，而非直接访问结构体成员。如：CGRect frame = self.view.frame;CGFloat x = CGRectGetMinX(frame);CGFloat y = CGRectGetMinY(frame);CGFloat width = CGRectGetWidth(frame);CGFloat height = CGRectGetHeight(frame);不恰当：CGRect frame = self.view.frame;CGFloat x = frame.origin.x;CGFloat y = frame.origin.y;CGFloat width = frame.size.width;CGFloat height = frame.size.height; 后话：附上之前写的文章，欢迎指正：荼菜的iOS笔记–Core Animation 核心动画 荼菜的iOS笔记–UIView的几个Block动画荼菜的iOS笔记–一些实用功能。荼菜的iOS笔记–UITableViewCell的各种操作（刷新、插入、删除、动画）荼菜的iOS笔记–一张图记住所有git命令行操作。荼菜的iOS笔记–一张图告诉你程序员需要知道的这些网站。荼菜的iOS笔记–图片裁剪黑魔法。荼菜的iOS笔记–iOS自动打包脚本（Python） 荼菜的iOS笔记–iOS基础优秀博客总结ToDoList荼菜的iOS笔记–Xcode Tips当然，我还写过诗。。。光。","tags":[]},{"title":"荼菜的iOS笔记--iOS自动打包","date":"2017-03-02T08:34:02.000Z","path":"2017/03/02/荼菜的iOS笔记-iOS自动打包/","text":"最近几天学Python，顺便写了个自动打包的脚本，给大家做个参考。注释和步骤代码里都写得有，使用时把工程路径换了就行。可以直接拷贝到你的.py文件里执行。当然你还可以来我的GitHub直接下载文件Python_Archiveipa 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889909192939495import osimport sysimport timeimport hashlibfrom email import encodersfrom email.header import Headerfrom email.mime.text import MIMETextfrom email.utils import parseaddr, formataddrimport smtplib# 项目根目录project_path = &apos;/Users/yanggan/Desktop/jucai-ios-app&apos;# 编译成功后.app所在目录 其中&apos;/Users/yanggan/Desktop/jucai-ios-app&apos;为项目路径app_path = &apos;%s/build/Build/Products/Release-iphoneos/JuCaiShengHuo.app&apos; % (project_path)# 指定项目下编译目录build_path = &apos;build&apos;# 打包后ipa存储目录targerIPA_parth = &apos;/Users/yanggan/Desktop&apos;# 项目名称project_name = &apos;JuCaiShengHuo&apos;# ipafilenameipa_filename = &apos;JuCaiShengHuo.ipa&apos;# firm的api token 需要自己申请账号，申请地址-&gt; http://fir.im/appsfir_api_token = &apos;4a0d2512c33d0a10ca0e59dbd04b45b0&apos;# 需要自己配置邮件端口号，服务器和对方邮箱地址#from_addr = &quot;邮件地址&quot;#password = &quot;邮件密码&quot;#smtp_server = &quot;smtp.服务器&quot;#to_addr = &quot;对方邮件地址&quot;# 清理项目 创建build目录def clean_project_mkdir_build(): os.system(&apos;cd %s;xcodebuild clean&apos; % project_path) # clean 项目 os.system(&apos;cd %s;mkdir build&apos; % project_path)def build_project(): print(&apos;build release start&apos;) os.system (&apos;xcodebuild -list&apos;) os.system (&apos;cd %s;xcodebuild -workspace %s.xcworkspace -scheme %s -configuration release -derivedDataPath %s ONLY_ACTIVE_ARCH=NO || exit&apos; % (project_path,project_name,project_name,build_path))# CONFIGURATION_BUILD_DIR=./build/Release-iphoneos# 打包ipa 并且保存在桌面def build_ipa(): global ipa_filename# ipa_filename = time.strftime(&apos;xx_%Y-%m-%d-%H-%M-%S.ipa&apos;,time.localtime(time.time())) os.system (&apos;xcrun -sdk iphoneos PackageApplication -v %s -o %s/%s&apos;%(app_path,targerIPA_parth,ipa_filename))#上传def upload_fir(): if os.path.exists(&apos;%s/%s&apos; % (targerIPA_parth,ipa_filename)): print(&apos;watting...&apos;) # 直接使用fir 有问题 这里使用了绝对地址 在终端通过 which fir 获得 ret = os.system(&apos;fir p %s/%s -T %s&apos; % (targerIPA_parth,ipa_filename,fir_api_token)) else: print(&apos;没有找到ipa文件&apos;)def _format_addr(s): name, addr = parseaddr(s) return formataddr((Header(name, &apos;utf-8&apos;).encode(), addr))# 发邮件def send_mail(): msg = MIMEText(&apos;xx iOS测试项目已经打包完毕，请前往 http://fir.im/xxxxx 下载测试！&apos;, &apos;plain&apos;, &apos;utf-8&apos;) msg[&apos;From&apos;] = _format_addr(&apos;自动打包系统 &lt;%s&gt;&apos; % from_addr) msg[&apos;To&apos;] = _format_addr(&apos;xx测试人员 &lt;%s&gt;&apos; % to_addr) msg[&apos;Subject&apos;] = Header(&apos;xx iOS客户端打包程序&apos;, &apos;utf-8&apos;).encode()# pop = poplib.POP3(&quot;pop3.mxhichina.com&quot;)# pop.set_debuglevel(1) #会打印出debug信息# pop.user(from_addr)# pop.pass_(password) server = smtplib.SMTP(smtp_server, 25) server.set_debuglevel(1) server.login(from_addr, password) server.sendmail(from_addr, [to_addr], msg.as_string()) server.quit()def main(): # 清理并创建build目录 clean_project_mkdir_build() # 编译coocaPods项目文件并 执行编译目录 build_project() # 打包ipa 并制定到桌面 build_ipa() # 上传fir # upload_fir() # 发邮件# send_mail() #暂时不用，需要配置企业邮箱的端口号和服务器# 执行main() 后话：附上之前写的文章，欢迎指正：荼菜的iOS笔记–Core Animation 核心动画 荼菜的iOS笔记–UIView的几个Block动画荼菜的iOS笔记–一些实用功能。荼菜的iOS笔记–UITableViewCell的各种操作（刷新、插入、删除、动画）荼菜的iOS笔记–一张图记住所有git命令行操作。荼菜的iOS笔记–一张图告诉你程序员需要知道的这些网站。荼菜的iOS笔记–图片裁剪黑魔法。荼菜的iOS笔记–我的编码规范参考。荼菜的iOS笔记–iOS基础优秀博客总结ToDoList荼菜的iOS笔记–Xcode Tips当然，我还写过诗。。。光。","tags":[]}]